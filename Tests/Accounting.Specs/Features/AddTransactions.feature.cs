// ------------------------------------------------------------------------------
//  <auto-generated>
//      This code was generated by Reqnroll (https://www.reqnroll.net/).
//      Reqnroll Version:1.0.0.0
//      Reqnroll Generator Version:1.0.0.0
// 
//      Changes to this file may cause incorrect behavior and will be lost if
//      the code is regenerated.
//  </auto-generated>
// ------------------------------------------------------------------------------
#region Designer generated code
#pragma warning disable
namespace Accounting.Specs.Features
{
    using Reqnroll;
    using System;
    using System.Linq;
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Reqnroll", "1.0.0.0")]
    [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    public partial class AddTransactionsFeature : object, Xunit.IClassFixture<AddTransactionsFeature.FixtureData>, Xunit.IAsyncLifetime
    {
        
        private static Reqnroll.ITestRunner testRunner;
        
        private static string[] featureTags = ((string[])(null));
        
        private Xunit.Abstractions.ITestOutputHelper _testOutputHelper;
        
#line 1 "AddTransactions.feature"
#line hidden
        
        public AddTransactionsFeature(AddTransactionsFeature.FixtureData fixtureData, Xunit.Abstractions.ITestOutputHelper testOutputHelper)
        {
            this._testOutputHelper = testOutputHelper;
        }
        
        public static async System.Threading.Tasks.Task FeatureSetupAsync()
        {
            testRunner = Reqnroll.TestRunnerManager.GetTestRunnerForAssembly(null, Reqnroll.xUnit.ReqnrollPlugin.XUnitParallelWorkerTracker.Instance.GetWorkerId());
            Reqnroll.FeatureInfo featureInfo = new Reqnroll.FeatureInfo(new System.Globalization.CultureInfo("en-US"), "Features", "Add Transactions", "A short summary of the feature", ProgrammingLanguage.CSharp, featureTags);
            await testRunner.OnFeatureStartAsync(featureInfo);
        }
        
        public static async System.Threading.Tasks.Task FeatureTearDownAsync()
        {
            string testWorkerId = testRunner.TestWorkerId;
            await testRunner.OnFeatureEndAsync();
            testRunner = null;
            Reqnroll.xUnit.ReqnrollPlugin.XUnitParallelWorkerTracker.Instance.ReleaseWorker(testWorkerId);
        }
        
        public async System.Threading.Tasks.Task TestInitializeAsync()
        {
        }
        
        public async System.Threading.Tasks.Task TestTearDownAsync()
        {
            await testRunner.OnScenarioEndAsync();
        }
        
        public void ScenarioInitialize(Reqnroll.ScenarioInfo scenarioInfo)
        {
            testRunner.OnScenarioInitialize(scenarioInfo);
            testRunner.ScenarioContext.ScenarioContainer.RegisterInstanceAs<Xunit.Abstractions.ITestOutputHelper>(_testOutputHelper);
        }
        
        public async System.Threading.Tasks.Task ScenarioStartAsync()
        {
            await testRunner.OnScenarioStartAsync();
        }
        
        public async System.Threading.Tasks.Task ScenarioCleanupAsync()
        {
            await testRunner.CollectScenarioErrorsAsync();
        }
        
        async System.Threading.Tasks.Task Xunit.IAsyncLifetime.InitializeAsync()
        {
            await this.TestInitializeAsync();
        }
        
        async System.Threading.Tasks.Task Xunit.IAsyncLifetime.DisposeAsync()
        {
            await this.TestTearDownAsync();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="Adding a transaction with one debit entry and one credit entry")]
        [Xunit.TraitAttribute("FeatureTitle", "Add Transactions")]
        [Xunit.TraitAttribute("Description", "Adding a transaction with one debit entry and one credit entry")]
        [Xunit.TraitAttribute("Category", "tag1")]
        public async System.Threading.Tasks.Task AddingATransactionWithOneDebitEntryAndOneCreditEntry()
        {
            string[] tagsOfScenario = new string[] {
                    "tag1"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            Reqnroll.ScenarioInfo scenarioInfo = new Reqnroll.ScenarioInfo("Adding a transaction with one debit entry and one credit entry", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 6
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                await this.ScenarioStartAsync();
                Reqnroll.Table table1 = new Reqnroll.Table(new string[] {
                            "Type",
                            "Account",
                            "Amount"});
                table1.AddRow(new string[] {
                            "Debit",
                            "Cash",
                            "1000"});
                table1.AddRow(new string[] {
                            "Credit",
                            "Owner\'s Equity",
                            "1000"});
#line 7
    await testRunner.GivenAsync("a new transaction with date \"2024-01-01\", description \"Investment by Owner\", and " +
                        "the following entries", ((string)(null)), table1, "Given ");
#line hidden
#line 11
    await testRunner.WhenAsync("the transaction is recorded", ((string)(null)), ((Reqnroll.Table)(null)), "When ");
#line hidden
                Reqnroll.Table table2 = new Reqnroll.Table(new string[] {
                            "Type",
                            "Account",
                            "Amount"});
                table2.AddRow(new string[] {
                            "Debit",
                            "Cash",
                            "1000"});
                table2.AddRow(new string[] {
                            "Credit",
                            "Owner\'s Equity",
                            "1000"});
#line 12
    await testRunner.ThenAsync("the journal should have a transaction with date \"2024-01-01\", description \"Invest" +
                        "ment by Owner\", and the following entries", ((string)(null)), table2, "Then ");
#line hidden
#line 16
    await testRunner.AndAsync("the ledger should update the \"Cash\" account with a debit of 1000", ((string)(null)), ((Reqnroll.Table)(null)), "And ");
#line hidden
#line 17
    await testRunner.AndAsync("the ledger should update the \"Owner\'s Equity\" account with a credit of 1000", ((string)(null)), ((Reqnroll.Table)(null)), "And ");
#line hidden
            }
            await this.ScenarioCleanupAsync();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="Adding a transaction with one debit entry and multiple credit entries")]
        [Xunit.TraitAttribute("FeatureTitle", "Add Transactions")]
        [Xunit.TraitAttribute("Description", "Adding a transaction with one debit entry and multiple credit entries")]
        public async System.Threading.Tasks.Task AddingATransactionWithOneDebitEntryAndMultipleCreditEntries()
        {
            string[] tagsOfScenario = ((string[])(null));
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            Reqnroll.ScenarioInfo scenarioInfo = new Reqnroll.ScenarioInfo("Adding a transaction with one debit entry and multiple credit entries", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 19
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                await this.ScenarioStartAsync();
                Reqnroll.Table table3 = new Reqnroll.Table(new string[] {
                            "Type",
                            "Account",
                            "Amount"});
                table3.AddRow(new string[] {
                            "Debit",
                            "Accounts Receivable",
                            "700"});
                table3.AddRow(new string[] {
                            "Credit",
                            "Sales Revenue",
                            "600"});
                table3.AddRow(new string[] {
                            "Credit",
                            "Sales Tax Payable",
                            "100"});
#line 20
    await testRunner.GivenAsync("a new transaction with date \"2024-01-02\", description \"Sales Transaction\", and th" +
                        "e following entries", ((string)(null)), table3, "Given ");
#line hidden
#line 25
    await testRunner.WhenAsync("the transaction is recorded", ((string)(null)), ((Reqnroll.Table)(null)), "When ");
#line hidden
                Reqnroll.Table table4 = new Reqnroll.Table(new string[] {
                            "Type",
                            "Account",
                            "Amount"});
                table4.AddRow(new string[] {
                            "Debit",
                            "Accounts Receivable",
                            "700"});
                table4.AddRow(new string[] {
                            "Credit",
                            "Sales Revenue",
                            "600"});
                table4.AddRow(new string[] {
                            "Credit",
                            "Sales Tax Payable",
                            "100"});
#line 26
    await testRunner.ThenAsync("the journal should have a transaction with date \"2024-01-02\", description \"Sales " +
                        "Transaction\", and the following entries", ((string)(null)), table4, "Then ");
#line hidden
#line 31
    await testRunner.AndAsync("the ledger should update the \"Accounts Receivable\" account with a debit of 700", ((string)(null)), ((Reqnroll.Table)(null)), "And ");
#line hidden
#line 32
    await testRunner.AndAsync("the ledger should update the \"Sales Revenue\" account with a credit of 600", ((string)(null)), ((Reqnroll.Table)(null)), "And ");
#line hidden
#line 33
    await testRunner.AndAsync("the ledger should update the \"Sales Tax Payable\" account with a credit of 100", ((string)(null)), ((Reqnroll.Table)(null)), "And ");
#line hidden
            }
            await this.ScenarioCleanupAsync();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="Adding a compound transaction with multiple debit and credit entries")]
        [Xunit.TraitAttribute("FeatureTitle", "Add Transactions")]
        [Xunit.TraitAttribute("Description", "Adding a compound transaction with multiple debit and credit entries")]
        [Xunit.TraitAttribute("Category", "tag1")]
        public async System.Threading.Tasks.Task AddingACompoundTransactionWithMultipleDebitAndCreditEntries()
        {
            string[] tagsOfScenario = new string[] {
                    "tag1"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            Reqnroll.ScenarioInfo scenarioInfo = new Reqnroll.ScenarioInfo("Adding a compound transaction with multiple debit and credit entries", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 36
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                await this.ScenarioStartAsync();
                Reqnroll.Table table5 = new Reqnroll.Table(new string[] {
                            "Type",
                            "Account",
                            "Amount"});
                table5.AddRow(new string[] {
                            "Debit",
                            "Office Supplies",
                            "500"});
                table5.AddRow(new string[] {
                            "Credit",
                            "Cash",
                            "300"});
                table5.AddRow(new string[] {
                            "Credit",
                            "Accounts Payable",
                            "200"});
#line 37
    await testRunner.GivenAsync("a new transaction with date \"2024-01-03\", description \"Office Supplies Purchase\"," +
                        " and the following entries", ((string)(null)), table5, "Given ");
#line hidden
#line 42
    await testRunner.WhenAsync("the transaction is recorded", ((string)(null)), ((Reqnroll.Table)(null)), "When ");
#line hidden
                Reqnroll.Table table6 = new Reqnroll.Table(new string[] {
                            "Type",
                            "Account",
                            "Amount"});
                table6.AddRow(new string[] {
                            "Debit",
                            "Office Supplies",
                            "500"});
                table6.AddRow(new string[] {
                            "Credit",
                            "Cash",
                            "300"});
                table6.AddRow(new string[] {
                            "Credit",
                            "Accounts Payable",
                            "200"});
#line 43
    await testRunner.ThenAsync("the journal should have a transaction with date \"2024-01-03\", description \"Office" +
                        " Supplies Purchase\", and the following entries", ((string)(null)), table6, "Then ");
#line hidden
#line 48
    await testRunner.AndAsync("the ledger should update the \"Office Supplies\" account with a debit of 500", ((string)(null)), ((Reqnroll.Table)(null)), "And ");
#line hidden
#line 49
    await testRunner.AndAsync("the ledger should update the \"Cash\" account with a credit of 300", ((string)(null)), ((Reqnroll.Table)(null)), "And ");
#line hidden
#line 50
    await testRunner.AndAsync("the ledger should update the \"Accounts Payable\" account with a credit of 200", ((string)(null)), ((Reqnroll.Table)(null)), "And ");
#line hidden
            }
            await this.ScenarioCleanupAsync();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="Adding a transaction with multiple debit entries and one credit entry")]
        [Xunit.TraitAttribute("FeatureTitle", "Add Transactions")]
        [Xunit.TraitAttribute("Description", "Adding a transaction with multiple debit entries and one credit entry")]
        [Xunit.TraitAttribute("Category", "tag1")]
        public async System.Threading.Tasks.Task AddingATransactionWithMultipleDebitEntriesAndOneCreditEntry()
        {
            string[] tagsOfScenario = new string[] {
                    "tag1"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            Reqnroll.ScenarioInfo scenarioInfo = new Reqnroll.ScenarioInfo("Adding a transaction with multiple debit entries and one credit entry", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 53
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                await this.ScenarioStartAsync();
                Reqnroll.Table table7 = new Reqnroll.Table(new string[] {
                            "Type",
                            "Account",
                            "Amount"});
                table7.AddRow(new string[] {
                            "Debit",
                            "Utilities Expense",
                            "400"});
                table7.AddRow(new string[] {
                            "Debit",
                            "Bank Fees",
                            "50"});
                table7.AddRow(new string[] {
                            "Credit",
                            "Cash",
                            "450"});
#line 54
    await testRunner.GivenAsync("a new transaction with date \"2024-01-04\", description \"Utility Bill Payment\", and" +
                        " the following entries", ((string)(null)), table7, "Given ");
#line hidden
#line 59
    await testRunner.WhenAsync("the transaction is recorded", ((string)(null)), ((Reqnroll.Table)(null)), "When ");
#line hidden
                Reqnroll.Table table8 = new Reqnroll.Table(new string[] {
                            "Type",
                            "Account",
                            "Amount"});
                table8.AddRow(new string[] {
                            "Debit",
                            "Utilities Expense",
                            "400"});
                table8.AddRow(new string[] {
                            "Debit",
                            "Bank Fees",
                            "50"});
                table8.AddRow(new string[] {
                            "Credit",
                            "Cash",
                            "450"});
#line 60
    await testRunner.ThenAsync("the journal should have a transaction with date \"2024-01-04\", description \"Utilit" +
                        "y Bill Payment\", and the following entries", ((string)(null)), table8, "Then ");
#line hidden
#line 65
    await testRunner.AndAsync("the ledger should update the \"Utilities Expense\" account with a debit of 400", ((string)(null)), ((Reqnroll.Table)(null)), "And ");
#line hidden
#line 66
    await testRunner.AndAsync("the ledger should update the \"Bank Fees\" account with a debit of 50", ((string)(null)), ((Reqnroll.Table)(null)), "And ");
#line hidden
#line 67
    await testRunner.AndAsync("the ledger should update the \"Cash\" account with a credit of 450", ((string)(null)), ((Reqnroll.Table)(null)), "And ");
#line hidden
            }
            await this.ScenarioCleanupAsync();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="Adding a transaction with prepayment")]
        [Xunit.TraitAttribute("FeatureTitle", "Add Transactions")]
        [Xunit.TraitAttribute("Description", "Adding a transaction with prepayment")]
        [Xunit.TraitAttribute("Category", "tag1")]
        public async System.Threading.Tasks.Task AddingATransactionWithPrepayment()
        {
            string[] tagsOfScenario = new string[] {
                    "tag1"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            Reqnroll.ScenarioInfo scenarioInfo = new Reqnroll.ScenarioInfo("Adding a transaction with prepayment", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 71
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                await this.ScenarioStartAsync();
                Reqnroll.Table table9 = new Reqnroll.Table(new string[] {
                            "Type",
                            "Account",
                            "Amount"});
                table9.AddRow(new string[] {
                            "Debit",
                            "Prepaid Insurance",
                            "600"});
                table9.AddRow(new string[] {
                            "Credit",
                            "Cash",
                            "600"});
#line 72
    await testRunner.GivenAsync("a new transaction with date \"2024-01-05\", description \"Prepaid Insurance\", and th" +
                        "e following entries", ((string)(null)), table9, "Given ");
#line hidden
#line 76
    await testRunner.WhenAsync("the transaction is recorded", ((string)(null)), ((Reqnroll.Table)(null)), "When ");
#line hidden
                Reqnroll.Table table10 = new Reqnroll.Table(new string[] {
                            "Type",
                            "Account",
                            "Amount"});
                table10.AddRow(new string[] {
                            "Debit",
                            "Prepaid Insurance",
                            "600"});
                table10.AddRow(new string[] {
                            "Credit",
                            "Cash",
                            "600"});
#line 77
    await testRunner.ThenAsync("the journal should have a transaction with date \"2024-01-05\", description \"Prepai" +
                        "d Insurance\", and the following entries", ((string)(null)), table10, "Then ");
#line hidden
#line 81
    await testRunner.AndAsync("the ledger should update the \"Prepaid Insurance\" account with a debit of 600", ((string)(null)), ((Reqnroll.Table)(null)), "And ");
#line hidden
#line 82
    await testRunner.AndAsync("the ledger should update the \"Cash\" account with a credit of 600", ((string)(null)), ((Reqnroll.Table)(null)), "And ");
#line hidden
            }
            await this.ScenarioCleanupAsync();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="Adding a transaction with accrued expense")]
        [Xunit.TraitAttribute("FeatureTitle", "Add Transactions")]
        [Xunit.TraitAttribute("Description", "Adding a transaction with accrued expense")]
        [Xunit.TraitAttribute("Category", "tag1")]
        public async System.Threading.Tasks.Task AddingATransactionWithAccruedExpense()
        {
            string[] tagsOfScenario = new string[] {
                    "tag1"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            Reqnroll.ScenarioInfo scenarioInfo = new Reqnroll.ScenarioInfo("Adding a transaction with accrued expense", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 85
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                await this.ScenarioStartAsync();
                Reqnroll.Table table11 = new Reqnroll.Table(new string[] {
                            "Type",
                            "Account",
                            "Amount"});
                table11.AddRow(new string[] {
                            "Debit",
                            "Salaries Expense",
                            "1200"});
                table11.AddRow(new string[] {
                            "Credit",
                            "Salaries Payable",
                            "1200"});
#line 86
    await testRunner.GivenAsync("a new transaction with date \"2024-01-06\", description \"Accrued Salaries\", and the" +
                        " following entries", ((string)(null)), table11, "Given ");
#line hidden
#line 90
    await testRunner.WhenAsync("the transaction is recorded", ((string)(null)), ((Reqnroll.Table)(null)), "When ");
#line hidden
                Reqnroll.Table table12 = new Reqnroll.Table(new string[] {
                            "Type",
                            "Account",
                            "Amount"});
                table12.AddRow(new string[] {
                            "Debit",
                            "Salaries Expense",
                            "1200"});
                table12.AddRow(new string[] {
                            "Credit",
                            "Salaries Payable",
                            "1200"});
#line 91
    await testRunner.ThenAsync("the journal should have a transaction with date \"2024-01-06\", description \"Accrue" +
                        "d Salaries\", and the following entries", ((string)(null)), table12, "Then ");
#line hidden
#line 95
    await testRunner.AndAsync("the ledger should update the \"Salaries Expense\" account with a debit of 1200", ((string)(null)), ((Reqnroll.Table)(null)), "And ");
#line hidden
#line 96
    await testRunner.AndAsync("the ledger should update the \"Salaries Payable\" account with a credit of 1200", ((string)(null)), ((Reqnroll.Table)(null)), "And ");
#line hidden
            }
            await this.ScenarioCleanupAsync();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="Adding a transaction with deferred revenue")]
        [Xunit.TraitAttribute("FeatureTitle", "Add Transactions")]
        [Xunit.TraitAttribute("Description", "Adding a transaction with deferred revenue")]
        [Xunit.TraitAttribute("Category", "tag1")]
        public async System.Threading.Tasks.Task AddingATransactionWithDeferredRevenue()
        {
            string[] tagsOfScenario = new string[] {
                    "tag1"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            Reqnroll.ScenarioInfo scenarioInfo = new Reqnroll.ScenarioInfo("Adding a transaction with deferred revenue", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 99
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                await this.ScenarioStartAsync();
                Reqnroll.Table table13 = new Reqnroll.Table(new string[] {
                            "Type",
                            "Account",
                            "Amount"});
                table13.AddRow(new string[] {
                            "Debit",
                            "Cash",
                            "1500"});
                table13.AddRow(new string[] {
                            "Credit",
                            "Deferred Revenue",
                            "1500"});
#line 100
    await testRunner.GivenAsync("a new transaction with date \"2024-01-07\", description \"Deferred Revenue\", and the" +
                        " following entries", ((string)(null)), table13, "Given ");
#line hidden
#line 104
    await testRunner.WhenAsync("the transaction is recorded", ((string)(null)), ((Reqnroll.Table)(null)), "When ");
#line hidden
                Reqnroll.Table table14 = new Reqnroll.Table(new string[] {
                            "Type",
                            "Account",
                            "Amount"});
                table14.AddRow(new string[] {
                            "Debit",
                            "Cash",
                            "1500"});
                table14.AddRow(new string[] {
                            "Credit",
                            "Deferred Revenue",
                            "1500"});
#line 105
    await testRunner.ThenAsync("the journal should have a transaction with date \"2024-01-07\", description \"Deferr" +
                        "ed Revenue\", and the following entries", ((string)(null)), table14, "Then ");
#line hidden
#line 109
    await testRunner.AndAsync("the ledger should update the \"Cash\" account with a debit of 1500", ((string)(null)), ((Reqnroll.Table)(null)), "And ");
#line hidden
#line 110
    await testRunner.AndAsync("the ledger should update the \"Deferred Revenue\" account with a credit of 1500", ((string)(null)), ((Reqnroll.Table)(null)), "And ");
#line hidden
            }
            await this.ScenarioCleanupAsync();
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("Reqnroll", "1.0.0.0")]
        [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
        public class FixtureData : object, Xunit.IAsyncLifetime
        {
            
            async System.Threading.Tasks.Task Xunit.IAsyncLifetime.InitializeAsync()
            {
                await AddTransactionsFeature.FeatureSetupAsync();
            }
            
            async System.Threading.Tasks.Task Xunit.IAsyncLifetime.DisposeAsync()
            {
                await AddTransactionsFeature.FeatureTearDownAsync();
            }
        }
    }
}
#pragma warning restore
#endregion
